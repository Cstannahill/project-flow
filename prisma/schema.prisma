datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]         @relation("UserAccounts")
  sessions        Session[]         @relation("UserSessions")
  projects        Project[]
  UserPreferences UserPreferences[]
}

model UserPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  selectedProjectId    String?
  theme                String   @default("light")
  language             String   @default("en")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String
  techStack   Json?
  diagrams    Diagram[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User             @relation(fields: [userId], references: [id])
  features    Feature[]
  schemas     DatabaseSchema[]
  apiRoutes   ApiRoute[]
  ApiSpec     ApiSpec[]
  openapiSpec Json?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?    @map("refresh_token_expires_in")
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAccounts")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserSessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feature {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  tags        String[]
  status      String?
  order       Int
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Diagram {
  id        String   @id @default(cuid())
  title     String
  type      String
  content   String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DatabaseSchema {
  id        String   @id @default(cuid())
  title     String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiRoute {
  id          String     @id @default(cuid())
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  method      HttpMethod
  path        String
  summary     String
  description String
  params      Json?
  query       Json?
  body        Json?
  responses   Json?
  openApiPath String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ApiSpec {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String   @unique
  title       String
  description String?
  version     String   @default("1.0.0")
  spec        Json // Full OpenAPI JSON spec
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
