datasource db {
  provider = "postgresql" // or mysql, sqlite, etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[] @relation("UserAccounts")
  sessions      Session[] @relation("UserSessions")
  projects      Project[] // ðŸ‘ˆ Add this line
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String
  techStack   Json?
  diagrams    Diagram[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId   String
  user     User      @relation(fields: [userId], references: [id])
  features Feature[]
  schemas     DatabaseSchema[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserAccounts")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserSessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feature {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  tags        String[] // âœ… This must be here
  status      String?
  order       Int
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Diagram {
  id        String   @id @default(cuid())
  title     String
  type      String // e.g. "flowchart", "sequence", "gantt", etc.
  content   String // the Mermaid diagram definition
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DatabaseSchema {
  id        String   @id @default(cuid())
  title     String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}